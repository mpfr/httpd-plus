
Copyright (c) 2020 Matthias Pressfreund

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Index: usr.sbin/httpd/httpd.conf.5
@@ -403,7 +403,8 @@
 .It Ic listen on Ar address Oo Ic tls Oc Ic port Ar number
 Set the listen address and port.
 This statement can be specified multiple times.
-.It Ic location Oo Oo Ic not Oc Ic found Oc Ar path Brq ...
+.It Ic location Oo Oo Ic not Oc Ic found Oc Ar path Oo Oo Ic not Oc Ic from
+.Ar network Oo Ar network ... Oc Oc Brq ...
 Specify server configuration rules for a specific location.
 The
 .Ar path
@@ -412,7 +413,25 @@
 .Ar found
 (i.e. accessible) or
 .Ar not found
-request paths only.
+request paths.
+Specifying
+.Ar from
+or
+.Ar not from
+enables client IP filtering accepting or refusing connections from
+the specified list of up to 16
+.Ar network
+strings, as outlined in
+.Xr inet_net_ntop 3 ,
+each being matched either against the client's IP address or, in case a
+.Ar network
+string is preceded by a '>' character, against the content of the
+.Ar X-Forwarded-For
+HTTP request header.
+If there was no such header transmitted or the data transmitted could not be
+read as a valid IP address, the unspecified address
+.Ar 0:0:0:0:0:0:0:0, resp. 0.0.0.0
+will be silently used for matching instead.
 In case of multiple location statements in the same context, the
 first matching location statement will be put into effect, while all
 later ones will be ignored.
@@ -428,7 +447,8 @@
 .Ic tcp
 and
 .Ic tls .
-.It Ic location Oo Oo Ic not Oc Ic found Oc Ic match Ar path Brq ...
+.It Ic location Oo Oo Ic not Oc Ic found Oc Ic match Ar path Oo Oo Ic not Oc
+.Ic from Ar network Oo Ar network ... Oc Oc Brq ...
 Like the
 .Ic location
 option,
Index: usr.sbin/httpd/httpd.h
@@ -57,6 +57,7 @@
 #define HTTPD_MAX_ALIAS_IP	16
 #define HTTPD_REALM_MAX		255
 #define HTTPD_LOCATION_MAX	255
+#define HTTPD_CLIENT_FILTER_MAX	16
 #define HTTPD_DEFAULT_TYPE	{ \
 	"bin", "application", "octet-stream", "", NULL }
 #define HTTPD_LOGVIS		VIS_NL|VIS_TAB|VIS_CSTYLE
@@ -394,6 +395,8 @@
 #define SRVFLAG_DEFAULT_TYPE	0x00800000
 #define SRVFLAG_PATH_REWRITE	0x01000000
 #define SRVFLAG_NO_PATH_REWRITE	0x02000000
+#define SRVFLAG_CLIENT_FROM	0x10000000
+#define SRVFLAG_CLIENT_NOT_FROM 0x20000000
 #define SRVFLAG_LOCATION_FOUND	0x40000000
 #define SRVFLAG_LOCATION_NOT_FOUND 0x80000000
 
@@ -403,7 +406,8 @@
 	"\14SYSLOG\15NO_SYSLOG\16TLS\17ACCESS_LOG\20ERROR_LOG"		\
 	"\21AUTH\22NO_AUTH\23BLOCK\24NO_BLOCK\25LOCATION_MATCH"		\
 	"\26SERVER_MATCH\27SERVER_HSTS\30DEFAULT_TYPE\31PATH\32NO_PATH" \
-	"\37LOCATION_FOUND\40LOCATION_NOT_FOUND"
+	"\35CLIENT_FROM\36CLIENT_NOT_FROM\37LOCATION_FOUND"		\
+	"\40LOCATION_NOT_FOUND"
 
 #define TCPFLAG_NODELAY		0x01
 #define TCPFLAG_NNODELAY	0x02
@@ -474,6 +478,29 @@
 };
 TAILQ_HEAD(server_fcgiparams, fastcgi_param);
 
+union addrvalue {
+	struct in_addr	 ipv4;
+	struct in6_addr	 ipv6;
+};
+enum addrtype { IPv4 = 1, IPv6 };
+
+struct client_addr {
+	union addrvalue	 value;
+	enum addrtype	 type;
+};
+
+struct ip_range {
+	union addrvalue	 first;
+	union addrvalue	 last;
+	enum addrtype	 type;
+	unsigned char	 xff;
+};
+
+struct server_client_addr {
+	struct client_addr	 srv;
+	struct client_addr	 xff;
+};
+
 struct server_config {
 	uint32_t		 id;
 	uint32_t		 parent_id;
@@ -546,6 +576,8 @@
 	struct server_fcgiparams fcgiparams;
 	int			 fcgistrip;
 
+	struct ip_range	 clientfilter[HTTPD_CLIENT_FILTER_MAX];
+
 	TAILQ_ENTRY(server_config) entry;
 };
 TAILQ_HEAD(serverhosts, server_config);
@@ -699,6 +728,8 @@
 struct server_config *
 	 server_getlocation(struct client *, const char *);
 int	 server_locationaccesstest(struct server_config *, const char *);
+int	 server_clientipfilter(struct server_config *,
+	    struct server_client_addr *);
 const char *
 	 server_http_host(struct sockaddr_storage *, char *, size_t);
 char	*server_http_parsehost(char *, char *, size_t, int *);
Index: usr.sbin/httpd/parse.y
@@ -73,6 +73,9 @@
 int		 check_file_secrecy(int, const char *);
 int		 yyparse(void);
 int		 yylex(void);
+struct ip_range
+		*build_clientfilter(struct server_config *, const char *);
+int		 clientfilter_cmp(struct ip_range *, struct ip_range *);
 int		 yyerror(const char *, ...)
     __attribute__((__format__ (printf, 1, 2)))
     __attribute__((__nonnull__ (1)));
@@ -143,14 +146,14 @@
 %token	PROTOCOLS REQUESTS ROOT SACK SERVER SOCKET STRIP STYLE SYSLOG TCP TICKET
 %token	TIMEOUT TLS TYPE TYPES HSTS MAXAGE SUBDOMAINS DEFAULT PRELOAD REQUEST
 %token	ERROR INCLUDE AUTHENTICATE WITH BLOCK DROP RETURN PASS REWRITE
-%token	CA CLIENT CRL OPTIONAL PARAM FORWARDED CACHE FOUND NOT SCRIPT
+%token	CA CLIENT CRL OPTIONAL PARAM FORWARDED CACHE FOUND NOT SCRIPT FROM
 %token	<v.string>	STRING
 %token  <v.number>	NUMBER
 %type	<v.port>	port
 %type	<v.string>	fcgiport
 %type	<v.number>	opttls optmatch optfound
 %type	<v.tv>		timeout
-%type	<v.string>	numberstring optstring
+%type	<v.string>	numberstring optstring optclientfilter clientfilters_l
 %type	<v.auth>	authopts
 
 %%
@@ -507,8 +510,8 @@
 		| fastcgi
 		| authenticate
 		| filter
-		| LOCATION optfound optmatch STRING	{
+		| LOCATION optfound optmatch STRING optclientfilter	{
 			struct server		*s;
 			struct sockaddr_un	*sun;
 
 			if (srv->srv_conf.ss.ss_family == AF_UNSPEC) {
@@ -572,6 +575,25 @@
 			}
 			if ($3)
 				s->srv_conf.flags |= SRVFLAG_LOCATION_MATCH;
+			if ($5) {
+				if (build_clientfilter(&s->srv_conf,
+				    $5 + 1) == NULL) {
+					free($5);
+					YYERROR;
+				}
+				if (*$5 == '+') {
+					s->srv_conf.flags &=
+					    ~SRVFLAG_CLIENT_NOT_FROM;
+					s->srv_conf.flags |=
+					    SRVFLAG_CLIENT_FROM;
+				} else if (*$5 == '-') {
+					s->srv_conf.flags &=
+					    ~SRVFLAG_CLIENT_FROM;
+					s->srv_conf.flags |=
+					    SRVFLAG_CLIENT_NOT_FROM;
+				}
+				free($5);
+			}
 			s->srv_s = -1;
 			memcpy(&s->srv_conf.ss, &srv->srv_conf.ss,
 			    sizeof(s->srv_conf.ss));
@@ -592,7 +614,9 @@
 			struct server	*s = NULL;
 			uint32_t	 f;
 
-			f = SRVFLAG_LOCATION_FOUND |
+			f = SRVFLAG_CLIENT_FROM |
+			    SRVFLAG_CLIENT_NOT_FROM |
+			    SRVFLAG_LOCATION_FOUND |
 			    SRVFLAG_LOCATION_NOT_FOUND;
 
 			TAILQ_FOREACH(s, conf->sc_servers, srv_entry) {
@@ -602,7 +626,9 @@
 				    (s->srv_conf.flags & f) ==
 				    (srv_conf->flags & f) &&
 				    strcmp(s->srv_conf.location,
-				    srv_conf->location) == 0)
+				    srv_conf->location) == 0 &&
+				    clientfilter_cmp(s->srv_conf.clientfilter,
+				    srv_conf->clientfilter) == 0)
 					break;
 			}
 			if (s != NULL) {
@@ -643,6 +669,51 @@
 		| NOT FOUND	{ $$ = -1; }
 		;
 
+optclientfilter	: /* empty */			{
+			$$ = NULL;
+		}
+		| FROM clientfilters_l		{
+			char	*s;
+
+			if (asprintf(&s, "+%s", $2) == -1) {
+				yyerror("asprintf: \"+%s\"", $2);
+				free($2);
+				YYERROR;
+			}
+			free($2);
+			$$ = s;
+		}
+		| NOT FROM clientfilters_l	{
+			char	*s;
+
+			if (asprintf(&s, "-%s", $3) == -1) {
+				yyerror("asprintf: \"-%s\"", $3);
+				free($3);
+				YYERROR;
+			}
+			free($3);
+			$$ = s;
+		}
+		;
+
+clientfilters_l	: clientfilters_l STRING	{
+			char	*s;
+
+			if (asprintf(&s, "%s %s", $1, $2) == -1) {
+				yyerror("asprintf: \"%s %s\"", $1, $2);
+				free($1);
+				free($2);
+				YYERROR;
+			}
+			free($1);
+			free($2);
+			$$ = s;
+		}
+		| STRING			{
+			$$ = $1;
+		}
+		;
+
 hsts		: HSTS '{' optnl hstsflags_l '}'
 		| HSTS hstsflags
 		| HSTS
@@ -1367,7 +1438,121 @@
 	int		 k_val;
 };
 
+struct ip_range *
+build_clientfilter(struct server_config *sc, const char *cfgstr)
+{
+	struct ip_range		*clt_fltr, rbuf;
+	const char		*cstr;
+	char			 buf[24];
+	size_t			 span;
+	int			 i, bits, j, k, b;
+	unsigned char		*first, *last;
+
+	if (((SRVFLAG_CLIENT_FROM | SRVFLAG_CLIENT_NOT_FROM) &
+	    sc->flags) != 0) {
+		yyerror("client ip filter already defined");
+		return (NULL);
+	}
+
+	clt_fltr = sc->clientfilter;
+	memset(clt_fltr, 0, sizeof(*clt_fltr) * HTTPD_CLIENT_FILTER_MAX);
+
+	for (cstr = cfgstr, i = 0;
+	    (cstr = strpbrk(cstr, "0123456789AaBbCcDdEeFf:>")) != NULL;) {
+		if (i >= HTTPD_CLIENT_FILTER_MAX) {
+			yyerror("too many client ip filter networks");
+			return (NULL);
+		}
+		memset(&rbuf, 0, sizeof(rbuf));
+		if (*cstr == '>') {
+			rbuf.xff = 1;
+			cstr += 1;
+		} else
+			rbuf.xff = 0;
+		if ((span = strcspn(cstr, " ,\t\n\\")) >= sizeof(buf)) {
+			yyerror("client ip filter too large: %s", cstr);
+			return (NULL);
+		}
+		memset(buf, 0, sizeof(buf));
+		if ((bits = inet_net_pton(AF_INET, strncpy(buf, cstr, span),
+		    &rbuf.first.ipv4, sizeof(rbuf.first.ipv4))) != -1) {
+			rbuf.type = IPv4;
+			first = (unsigned char *)&rbuf.first.ipv4.s_addr;
+			last = (unsigned char *)&rbuf.last.ipv4.s_addr;
+			j = 32 - bits;
+			k = 3;
+		} else if ((bits = inet_net_pton(AF_INET6, buf,
+		    &rbuf.first.ipv6, sizeof(rbuf.first.ipv6))) != -1) {
+			rbuf.type = IPv6;
+			first = (unsigned char *)&rbuf.first.ipv6.s6_addr;
+			last = (unsigned char *)&rbuf.last.ipv6.s6_addr;
+			j = 128 - bits;
+			k = 15;
+		} else {
+			yyerror("invalid client ip filter: %s", cstr);
+			return (NULL);
+		}
+		rbuf.last = rbuf.first;
+		for (b = 0; j > 0; j -= 1) {
+			first[k] &= ~(1 << b);
+			last[k] |= 1 << b;
+			if (++b > 7) {
+				b = 0;
+				k -= 1;
+			}
+		}
+		for (j = i; j > 0;)
+			if (memcmp(&clt_fltr[--j], &rbuf, sizeof(rbuf)) == 0)
+				goto next;
+#if DEBUG
+		if (rbuf.type == IPv4)
+			DPRINTF("%s: \"%s\" xff:%u type:%d bits:%d range:"
+			    "%08X...%08X",
+			    __func__, buf, rbuf.xff, rbuf.type, bits,
+			    be32toh(rbuf.first.ipv4.s_addr),
+			    be32toh(rbuf.last.ipv4.s_addr));
+		else
+			DPRINTF("%s: \"%s\" xff:%u type:%d bits:%d range:"
+			    "%016llX%016llX...%016llX%016llX",
+			    __func__, buf, rbuf.xff, rbuf.type, bits,
+			    be64toh(*(uint64_t *)rbuf.first.ipv6.s6_addr),
+			    be64toh(*(uint64_t *)&rbuf.first.ipv6.s6_addr[8]),
+			    be64toh(*(uint64_t *)rbuf.last.ipv6.s6_addr),
+			    be64toh(*(uint64_t *)&rbuf.last.ipv6.s6_addr[8]));
+#endif
+		clt_fltr[i++] = rbuf;
+next:
+		cstr += span;
+	}
+	if (i == 0) {
+		yyerror("empty client ip filter");
+		return (NULL);
+	}
+	return (clt_fltr);
+}
+
 int
+clientfilter_cmp(struct ip_range *a, struct ip_range *b)
+{
+	int	 i, j, c;
+
+	for (i = 0; i < HTTPD_CLIENT_FILTER_MAX; i += 1) {
+		if (!a[i].type)
+			return (memcmp(&a[i], &b[i], sizeof(struct ip_range)));
+
+		j = 0;
+		while (1) {
+			c = memcmp(&a[i], &b[j], sizeof(struct ip_range));
+			if (c == 0)
+				break;
+			if (!b[j].type || ++j == HTTPD_CLIENT_FILTER_MAX)
+				return (c);
+		}
+	}
+	return (0);
+}
+
+int
 yyerror(const char *fmt, ...)
 {
 	va_list		 ap;
@@ -1421,6 +1606,7 @@
 		{ "fastcgi",		FCGI },
 		{ "forwarded",		FORWARDED },
 		{ "found",		FOUND },
+		{ "from",		FROM },
 		{ "hsts",		HSTS },
 		{ "include",		INCLUDE },
 		{ "index",		INDEX },
Index: usr.sbin/httpd/server_http.c
@@ -1406,11 +1406,47 @@
 struct server_config *
 server_getlocation(struct client *clt, const char *path)
 {
+	struct kv			 key, *xff;
+	struct http_descriptor		*desc = clt->clt_descreq;
+	struct sockaddr_in		*sin;
+	struct sockaddr_in6		*sin6;
+	struct server_client_addr	 clt_addr;
+
 	struct server		*srv = clt->clt_srv;
 	struct server_config	*srv_conf = clt->clt_srv_conf, *location;
 	const char		*errstr = NULL;
 	int			 ret;
 
+	memset(&clt_addr, 0, sizeof(clt_addr));
+	key.kv_key = "X-Forwarded-For";
+	if ((xff = kv_find(&desc->http_headers, &key)) != NULL &&
+	    xff->kv_value != NULL) {
+		if (inet_pton(AF_INET, xff->kv_value,
+		    &clt_addr.xff.value.ipv4) == 1)
+			clt_addr.xff.type = IPv4;
+		else if (inet_pton(AF_INET6, xff->kv_value,
+		    &clt_addr.xff.value.ipv6) == 1)
+			clt_addr.xff.type = IPv6;
+		else
+			return (NULL);
+	}
+	switch (clt->clt_ss.ss_family) {
+	case AF_INET:
+		sin = (struct sockaddr_in *)&clt->clt_ss;
+		clt_addr.srv.value.ipv4 = sin->sin_addr;
+		clt_addr.srv.type = IPv4;
+		break;
+	case AF_INET6:
+		sin6 = (struct sockaddr_in6 *)&clt->clt_ss;
+		clt_addr.srv.value.ipv6 = sin6->sin6_addr;
+		clt_addr.srv.type = IPv6;
+		break;
+	default:
+		return (NULL);
+	}
+	if (!clt_addr.xff.type)
+		clt_addr.xff.type = clt_addr.srv.type;
+
 	/* Now search for the location */
 	TAILQ_FOREACH(location, &srv->srv_hosts, entry) {
 #ifdef DEBUG
@@ -1434,7 +1470,8 @@
 				    path)) == -1)
 					return (NULL);
 
-				if (ret)
+				if (ret || server_clientipfilter(location,
+				    &clt_addr))
 					continue;
 				/* Replace host configuration */
 				clt->clt_srv_conf = srv_conf = location;
@@ -1465,6 +1502,66 @@
 	close(rootfd);
 	return ((ret == -1 && SRVFLAG_LOCATION_FOUND & srv_conf->flags) ||
 	    (ret == 0 && SRVFLAG_LOCATION_NOT_FOUND & srv_conf->flags));
+}
+
+int
+server_clientipfilter(struct server_config *srv_conf,
+    struct server_client_addr *clt_addr)
+{
+	struct ip_range		*clt_fltr;
+	int			 i;
+	struct client_addr	*caddr;
+
+	if (((SRVFLAG_CLIENT_FROM | SRVFLAG_CLIENT_NOT_FROM) &
+	    srv_conf->flags) == 0)
+		return (0);
+
+	for (clt_fltr = srv_conf->clientfilter, i = 0;
+	    i < HTTPD_CLIENT_FILTER_MAX && clt_fltr[i].type; i += 1) {
+		caddr = clt_fltr[i].xff ? &clt_addr->xff : &clt_addr->srv;
+		if (clt_fltr[i].type != caddr->type) {
+			DPRINTF("%s: type-mismatch: client:%d <-> range:%d",
+			    __func__, caddr->type, clt_fltr[i].type);
+			continue;
+		}
+#if DEBUG
+		if (caddr->type == IPv4)
+			DPRINTF("%s: xff:%u type:%d client:%08X "
+			    "range:%08X...%08X",
+			    __func__, clt_fltr[i].xff, clt_fltr[i].type,
+			    be32toh(caddr->value.ipv4.s_addr),
+			    be32toh(clt_fltr[i].first.ipv4.s_addr),
+			    be32toh(clt_fltr[i].last.ipv4.s_addr));
+		else
+			DPRINTF("%s: xff:%u type:%d client:%016llX%016llX "
+			    "range:%016llX%016llX...%016llX%016llX",
+			    __func__, clt_fltr[i].xff, clt_fltr[i].type,
+			    be64toh(*(uint64_t *)
+			    caddr->value.ipv6.s6_addr),
+			    be64toh(*(uint64_t *)
+			    &caddr->value.ipv6.s6_addr[8]),
+			    be64toh(*(uint64_t *)
+			    clt_fltr[i].first.ipv6.s6_addr),
+			    be64toh(*(uint64_t *)
+			    &clt_fltr[i].first.ipv6.s6_addr[8]),
+			    be64toh(*(uint64_t *)
+			    clt_fltr[i].last.ipv6.s6_addr),
+			    be64toh(*(uint64_t *)
+			    &clt_fltr[i].last.ipv6.s6_addr[8]));
+#endif
+		if ((caddr->type == IPv4 &&
+		    memcmp(&caddr->value.ipv4, &clt_fltr[i].first.ipv4,
+		    sizeof(struct in_addr)) >= 0 &&
+		    memcmp(&caddr->value.ipv4, &clt_fltr[i].last.ipv4,
+		    sizeof(struct in_addr)) <= 0) ||
+		    (caddr->type == IPv6 &&
+		    memcmp(&caddr->value.ipv6, &clt_fltr[i].first.ipv6,
+		    sizeof(struct in6_addr)) >= 0 &&
+		    memcmp(&caddr->value.ipv6, &clt_fltr[i].last.ipv6,
+		    sizeof(struct in6_addr)) <= 0))
+			return ((SRVFLAG_CLIENT_FROM & srv_conf->flags) == 0);
+	}
+	return ((SRVFLAG_CLIENT_NOT_FROM & srv_conf->flags) == 0);
 }
 
 int
