
Copyright (c) 2020 Matthias Pressfreund

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Index: usr.sbin/httpd/config.c
@@ -18,6 +18,8 @@
 
 #include <sys/types.h>
 #include <sys/queue.h>
+#include <sys/socket.h>
+#include <sys/un.h>
 #include <sys/tree.h>
 #include <sys/time.h>
 #include <sys/uio.h>
@@ -135,9 +137,7 @@
 int
 config_getcfg(struct httpd *env, struct imsg *imsg)
 {
-	struct privsep		*ps = env->sc_ps;
 	struct ctl_flags	 cf;
-	unsigned int		 what;
 
 	if (IMSG_DATA_SIZE(imsg) != sizeof(cf))
 		return (0); /* ignore */
@@ -148,8 +148,6 @@
 	env->sc_flags = cf.cf_flags;
 	memcpy(env->sc_tls_sid, cf.cf_tls_sid, sizeof(env->sc_tls_sid));
 
-	what = ps->ps_what[privsep_process];
-
 	if (privsep_process != PROC_PARENT)
 		proc_compose(env->sc_ps, PROC_PARENT,
 		    IMSG_CFG_DONE, NULL, 0);
@@ -387,8 +385,10 @@
 	if (proc_composev(ps, PROC_SERVER, IMSG_CFG_FCGI, iov, c) != 0) {
 		log_warn("%s: failed to compose IMSG_CFG_FCGI imsg for "
 		    "`%s'", __func__, srv_conf->name);
+		free(iov);
 		return (-1);
 	}
+	free(iov);
 
 	return (0);
 }
@@ -489,7 +489,12 @@
 		/* Inherit configuration from the parent */
 		f = SRVFLAG_INDEX|SRVFLAG_NO_INDEX;
 		if ((srv_conf->flags & f) == 0) {
-			srv_conf->flags |= parent->flags & f;
+			/*
+			 * Inherit index flags from parent server only if
+			 * auto-index flag of location is not set
+			 */
+			if ((srv_conf->flags & SRVFLAG_AUTO_INDEX) == 0)
+				srv_conf->flags |= parent->flags & f;
 			(void)strlcpy(srv_conf->index, parent->index,
 			    sizeof(srv_conf->index));
 		}
@@ -498,13 +503,6 @@
 		if ((srv_conf->flags & f) == 0)
 			srv_conf->flags |= parent->flags & f;
 
-		f = SRVFLAG_SOCKET|SRVFLAG_FCGI;
-		if ((srv_conf->flags & f) == SRVFLAG_FCGI) {
-			srv_conf->flags |= f;
-			(void)strlcpy(srv_conf->socket, HTTPD_FCGI_SOCKET,
-			    sizeof(srv_conf->socket));
-		}
-
 		f = SRVFLAG_ROOT;
 		if ((srv_conf->flags & f) == 0) {
 			srv_conf->flags |= parent->flags & f;
@@ -683,7 +681,6 @@
 		if ((srv->srv_conf.return_uri = get_data(p + s,
 		    srv->srv_conf.return_uri_len)) == NULL)
 			goto fail;
-		s += srv->srv_conf.return_uri_len;
 	}
 
 	return (0);
Index: usr.sbin/httpd/http.h
@@ -246,6 +246,7 @@
 	/* Rewritten path and query remain NULL if not used */
 	char			*http_path_alias;
 	char			*http_query_alias;
+	char			*http_path_orig;
 
 	/* A tree of headers and attached lists for repeated headers. */
 	struct kv		*http_lastheader;
Index: usr.sbin/httpd/httpd.c
@@ -551,59 +551,6 @@
 	return (0);
 }
 
-const char *
-canonicalize_host(const char *host, char *name, size_t len)
-{
-	struct sockaddr_in	 sin4;
-	struct sockaddr_in6	 sin6;
-	size_t			 i, j;
-	size_t			 plen;
-	char			 c;
-
-	if (len < 2)
-		goto fail;
-
-	/*
-	 * Canonicalize an IPv4/6 address
-	 */
-	if (inet_pton(AF_INET, host, &sin4) == 1)
-		return (inet_ntop(AF_INET, &sin4, name, len));
-	if (inet_pton(AF_INET6, host, &sin6) == 1)
-		return (inet_ntop(AF_INET6, &sin6, name, len));
-
-	/*
-	 * Canonicalize a hostname
-	 */
-
-	/* 1. remove repeated dots and convert upper case to lower case */
-	plen = strlen(host);
-	memset(name, 0, len);
-	for (i = j = 0; i < plen; i++) {
-		if (j >= (len - 1))
-			goto fail;
-		c = tolower((unsigned char)host[i]);
-		if ((c == '.') && (j == 0 || name[j - 1] == '.'))
-			continue;
-		name[j++] = c;
-	}
-
-	/* 2. remove trailing dots */
-	for (i = j; i > 0; i--) {
-		if (name[i - 1] != '.')
-			break;
-		name[i - 1] = '\0';
-		j--;
-	}
-	if (j <= 0)
-		goto fail;
-
-	return (name);
-
- fail:
-	errno = EINVAL;
-	return (NULL);
-}
-
 const char *
 url_decode(char *url)
 {
@@ -1111,50 +1058,6 @@
 	memset(kv, 0, sizeof(*kv));
 }
 
-struct kv *
-kv_inherit(struct kv *dst, struct kv *src)
-{
-	memset(dst, 0, sizeof(*dst));
-	memcpy(dst, src, sizeof(*dst));
-	TAILQ_INIT(&dst->kv_children);
-
-	if (src->kv_key != NULL) {
-		if ((dst->kv_key = strdup(src->kv_key)) == NULL) {
-			kv_free(dst);
-			return (NULL);
-		}
-	}
-	if (src->kv_value != NULL) {
-		if ((dst->kv_value = strdup(src->kv_value)) == NULL) {
-			kv_free(dst);
-			return (NULL);
-		}
-	}
-
-	return (dst);
-}
-
-int
-kv_log(struct evbuffer *log, struct kv *kv)
-{
-	char	*msg;
-
-	if (log == NULL)
-		return (0);
-	if (asprintf(&msg, " [%s%s%s]",
-	    kv->kv_key == NULL ? "(unknown)" : kv->kv_key,
-	    kv->kv_value == NULL ? "" : ": ",
-	    kv->kv_value == NULL ? "" : kv->kv_value) == -1)
-		return (-1);
-	if (evbuffer_add(log, msg, strlen(msg)) == -1) {
-		free(msg);
-		return (-1);
-	}
-	free(msg);
-
-	return (0);
-}
-
 struct kv *
 kv_find(struct kvtree *keys, struct kv *kv)
 {
@@ -1326,22 +1282,6 @@
 	return (buf);
 }
 
-const char *
-print_time(struct timeval *a, struct timeval *b, char *buf, size_t len)
-{
-	struct timeval		tv;
-	unsigned long		h, sec, min;
-
-	timerclear(&tv);
-	timersub(a, b, &tv);
-	sec = tv.tv_sec % 60;
-	min = tv.tv_sec / 60 % 60;
-	h = tv.tv_sec / 60 / 60;
-
-	snprintf(buf, len, "%.2lu:%.2lu:%.2lu", h, min, sec);
-	return (buf);
-}
-
 const char *
 printb_flags(const uint32_t v, const char *bits)
 {
Index: usr.sbin/httpd/httpd.conf.5
@@ -14,7 +14,7 @@
 .\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 .\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 .\"
-.Dd $Mdocdate: April 23 2020 $
+.Dd $Mdocdate: August 24 2020 $
 .Dt HTTPD.CONF 5
 .Os
 .Sh NAME
@@ -284,12 +284,13 @@
 Enable FastCGI instead of serving files.
 Valid options are:
 .Bl -tag -width Ds
-.It Ic socket Ar socket
+.It Ic socket Oo Cm tcp Oc Ar socket Oo Ar port Oc
 .Nm httpd
 passes HTTP requests to a FastCGI handler listening on the socket
 .Ar socket .
-The socket can either be a UNIX domain socket or a TCP socket listening
-on localhost (127.0.0.1).
+The
+.Ar socket
+can either be a UNIX domain socket or a TCP socket.
 If the FastCGI handler is listening on a UNIX domain socket,
 .Ar socket
 is a local path name within the
@@ -301,7 +302,10 @@
 Alternatively if
 the FastCGI handler is listening on a TCP socket,
 .Ar socket
-starts with a colon followed by the TCP port number.
+is a hostname or an IP address.
+If the
+.Ar port
+is not specified, it defaults to port 9000.
 .It Ic strip Ar number
 Strip
 .Ar number
@@ -699,6 +703,11 @@
 Include types definitions from an external file, for example
 .Pa /usr/share/misc/mime.types .
 .El
+.Sh FILES
+.Bl -tag -width /etc/examples/httpd.conf -compact
+.It Pa /etc/examples/httpd.conf
+Example configuration file.
+.El
 .Sh EXAMPLES
 Example configuration files for
 .Nm
Index: usr.sbin/httpd/httpd.h
@@ -96,6 +96,7 @@
 #define CONFIG_ALL		0xff
 
 #define FCGI_CONTENT_SIZE	65535
+#define FCGI_DEFAULT_PORT	"9000"
 
 #define PROC_PARENT_SOCK_FILENO	3
 #define PROC_MAX_INSTANCES	32
@@ -121,25 +122,13 @@
 	uint8_t		 cf_tls_sid[TLS_MAX_SESSION_ID_LENGTH];
 };
 
-enum key_type {
-	KEY_TYPE_NONE		= 0,
-	KEY_TYPE_COOKIE,
-	KEY_TYPE_HEADER,
-	KEY_TYPE_PATH,
-	KEY_TYPE_QUERY,
-	KEY_TYPE_URL,
-	KEY_TYPE_MAX
-};
-
 TAILQ_HEAD(kvlist, kv);
 RB_HEAD(kvtree, kv);
 
 struct kv {
 	char			*kv_key;
 	char			*kv_value;
 
-	enum key_type		 kv_type;
-
 #define KV_FLAG_INVALID		 0x01
 #define KV_FLAG_GLOBBING	 0x02
 	uint8_t			 kv_flags;
@@ -387,7 +376,6 @@
 #define SRVFLAG_NO_FCGI		0x00000080
 #define SRVFLAG_LOG		0x00000100
 #define SRVFLAG_NO_LOG		0x00000200
-#define SRVFLAG_SOCKET		0x00000400
 #define SRVFLAG_SYSLOG		0x00000800
 #define SRVFLAG_NO_SYSLOG	0x00001000
 #define SRVFLAG_TLS		0x00002000
@@ -406,7 +392,7 @@
 
 #define SRVFLAG_BITS							\
 	"\10\01INDEX\02NO_INDEX\03AUTO_INDEX\04NO_AUTO_INDEX"		\
-	"\05ROOT\06LOCATION\07FCGI\10NO_FCGI\11LOG\12NO_LOG\13SOCKET"	\
+	"\05ROOT\06LOCATION\07FCGI\10NO_FCGI\11LOG\12NO_LOG"		\
 	"\14SYSLOG\15NO_SYSLOG\16TLS\17ACCESS_LOG\20ERROR_LOG"		\
 	"\21AUTH\22NO_AUTH\23BLOCK\24NO_BLOCK\25LOCATION_MATCH"		\
 	"\26SERVER_MATCH\27SERVER_HSTS\30DEFAULT_TYPE\31PATH\32NO_PATH"
@@ -487,11 +475,12 @@
 	char			 root[PATH_MAX];
 	char			 path[PATH_MAX];
 	char			 index[PATH_MAX];
-	char			 socket[PATH_MAX];
 	char			 accesslog[PATH_MAX];
 	char			 errorlog[PATH_MAX];
 	struct media_type	 default_type;
 
+	struct sockaddr_storage	 fastcgi_ss;
+
 	in_port_t		 port;
 	struct sockaddr_storage	 ss;
 	int			 prefixlen;
@@ -722,7 +713,6 @@
 int		 expand_string(char *, size_t, const char *, const char *);
 const char	*url_decode(char *);
 char		*url_encode(const char *);
-const char	*canonicalize_host(const char *, char *, size_t);
 const char	*canonicalize_path(const char *, char *, size_t);
 size_t		 path_info(char *);
 char		*escape_html(const char *);
@@ -744,8 +734,6 @@
 struct kv	*kv_extend(struct kvtree *, struct kv *, char *);
 void		 kv_purge(struct kvtree *);
 void		 kv_free(struct kv *);
-struct kv	*kv_inherit(struct kv *, struct kv *);
-int		 kv_log(struct evbuffer *, struct kv *);
 struct kv	*kv_find(struct kvtree *, struct kv *);
 int		 kv_cmp(struct kv *, struct kv *);
 struct media_type
@@ -764,7 +750,6 @@
 struct auth	*auth_byid(struct serverauth *, uint32_t);
 void		 auth_free(struct serverauth *, struct auth *);
 const char	*print_host(struct sockaddr_storage *, char *, size_t);
-const char	*print_time(struct timeval *, struct timeval *, char *, size_t);
 const char	*printb_flags(const uint32_t, const char *);
 void		 getmonotime(struct timeval *);
 
Index: usr.sbin/httpd/parse.y
@@ -27,6 +27,7 @@
 %{
 #include <sys/types.h>
 #include <sys/socket.h>
+#include <sys/un.h>
 #include <sys/stat.h>
 #include <sys/queue.h>
 #include <sys/tree.h>
@@ -116,6 +117,7 @@
 int		 listen_on(const char *, int, struct portrange *);
 int		 getservice(char *);
 int		 is_if_in_group(const char *, const char *);
+int		 get_fastcgi_dest(struct server_config *, const char *, char *);
 
 typedef struct {
 	union {
@@ -144,6 +146,7 @@
 %token	<v.string>	STRING
 %token  <v.number>	NUMBER
 %type	<v.port>	port
+%type	<v.string>	fcgiport
 %type	<v.number>	opttls optmatch
 %type	<v.tv>		timeout
 %type	<v.string>	numberstring optstring
@@ -221,7 +224,8 @@
 		;
 
 server		: SERVER optmatch STRING	{
-			struct server	*s;
+			struct server		*s;
+			struct sockaddr_un	*sun;
 
 			if (!loadcfg) {
 				free($3);
@@ -278,6 +283,12 @@
 			    HTTPD_TLS_ECDHE_CURVES,
 			    sizeof(s->srv_conf.tls_ecdhe_curves));
 
+			sun = (struct sockaddr_un *)&s->srv_conf.fastcgi_ss;
+			sun->sun_family = AF_UNIX;
+			(void)strlcpy(sun->sun_path, HTTPD_FCGI_SOCKET,
+			    sizeof(sun->sun_path));
+			sun->sun_len = sizeof(struct sockaddr_un);
+
 			s->srv_conf.hsts_max_age = SERVER_HSTS_DEFAULT_AGE;
 
 			if (last_server_id == INT_MAX) {
@@ -345,10 +356,17 @@
 				YYERROR;
 			}
 
-			if (server_tls_load_keypair(srv) == -1)
+			if (server_tls_load_keypair(srv) == -1) {
+				/* Soft fail as there may be no certificate. */
 				log_warnx("%s:%d: server \"%s\": failed to "
 				    "load public/private keys", file->name,
 				    yylval.lineno, srv->srv_conf.name);
+				serverconfig_free(srv_conf);
+				srv_conf = NULL;
+				free(srv);
+				srv = NULL;
+				break;
+			}
 
 			if (server_tls_load_ca(srv) == -1) {
 				yyerror("server \"%s\": failed to load "
@@ -497,7 +514,8 @@
 		| authenticate
 		| filter
 		| LOCATION optmatch STRING	{
-			struct server	*s;
+			struct server		*s;
+			struct sockaddr_un	*sun;
 
 			if (srv->srv_conf.ss.ss_family == AF_UNSPEC) {
 				yyerror("listen address not specified");
@@ -537,6 +555,12 @@
 				YYERROR;
 			}
 
+			sun = (struct sockaddr_un *)&s->srv_conf.fastcgi_ss;
+			sun->sun_family = AF_UNIX;
+			(void)strlcpy(sun->sun_path, HTTPD_FCGI_SOCKET,
+			    sizeof(sun->sun_path));
+			sun->sun_len = sizeof(struct sockaddr_un);
+
 			s->srv_conf.id = ++last_server_id;
 			/* A location entry uses the parent id */
 			s->srv_conf.parent_id = srv->srv_conf.id;
@@ -563,8 +587,10 @@
 			struct server	*s = NULL;
 
 			TAILQ_FOREACH(s, conf->sc_servers, srv_entry) {
+				/* Compare locations of same parent server */
 				if ((s->srv_conf.flags & SRVFLAG_LOCATION) &&
-				    s->srv_conf.id == srv_conf->id &&
+				    s->srv_conf.parent_id ==
+				    srv_conf->parent_id &&
 				    strcmp(s->srv_conf.location,
 				    srv_conf->location) == 0)
 					break;
@@ -648,17 +674,38 @@
 		| fcgiflags optnl
 		;
 
-fcgiflags	: SOCKET STRING		{
-			if (strlcpy(srv_conf->socket, $2,
-			    sizeof(srv_conf->socket)) >=
-			    sizeof(srv_conf->socket)) {
-				yyerror("fastcgi socket too long");
+fcgiflags	: SOCKET STRING {
+			struct sockaddr_un *sun;
+			sun = (struct sockaddr_un *)&srv_conf->fastcgi_ss;
+			memset(sun, 0, sizeof(*sun));
+			sun->sun_family = AF_UNIX;
+			if (strlcpy(sun->sun_path, $2, sizeof(sun->sun_path))
+			    >= sizeof(sun->sun_path)) {
+				yyerror("socket path too long");
 				free($2);
 				YYERROR;
 			}
+			srv_conf->fastcgi_ss.ss_len =
+			    sizeof(struct sockaddr_un);
 			free($2);
-			srv_conf->flags |= SRVFLAG_SOCKET;
 		}
+		| SOCKET TCP STRING {
+			if (get_fastcgi_dest(srv_conf, $3, FCGI_DEFAULT_PORT)
+			    == -1) {
+				free($3);
+				YYERROR;
+			}
+			free($3);
+		}
+		| SOCKET TCP STRING fcgiport {
+			if (get_fastcgi_dest(srv_conf, $3, $4) == -1) {
+				free($3);
+				free($4);
+				YYERROR;
+			}
+			free($3);
+			free($4);
+		}
 		| PARAM STRING STRING	{
 			struct fastcgi_param	*param;
 
@@ -1086,6 +1130,27 @@
 		| STRING		{ $$ = $1; }
 		;
 
+fcgiport	: NUMBER		{
+			if ($1 <= 0 || $1 > (int)USHRT_MAX) {
+				yyerror("invalid port: %lld", $1);
+				YYERROR;
+			}
+			if (asprintf(&$$, "%lld", $1) == -1) {
+				yyerror("out of memory");
+				YYERROR;
+			}
+		}
+		| STRING		{
+			if (getservice($1) <= 0) {
+				yyerror("invalid port: %s", $1);
+				free($1);
+				YYERROR;
+			}
+
+			$$ = $1;
+		}
+		;
+
 tcpip		: TCP '{' optnl tcpflags_l '}'
 		| TCP tcpflags
 		;
@@ -2326,10 +2381,8 @@
 		s = getservbyname(n, "tcp");
 		if (s == NULL)
 			s = getservbyname(n, "udp");
-		if (s == NULL) {
-			yyerror("unknown port %s", n);
+		if (s == NULL)
 			return (-1);
-		}
 		return (s->s_port);
 	}
 
@@ -2379,3 +2432,26 @@
 	close(s);
 	return (ret);
 }
+
+int
+get_fastcgi_dest(struct server_config *xsrv_conf, const char *node, char *port)
+{
+	struct addrinfo		 hints, *res;
+	int			 s;
+
+	memset(&hints, 0, sizeof(hints));
+	hints.ai_family = AF_UNSPEC;
+	hints.ai_socktype = SOCK_STREAM;
+
+	if ((s = getaddrinfo(node, port, &hints, &res)) != 0) {
+		yyerror("getaddrinfo: %s\n", gai_strerror(s));
+		return -1;
+	}
+
+	memset(&(xsrv_conf)->fastcgi_ss, 0, sizeof(xsrv_conf->fastcgi_ss));
+	memcpy(&(xsrv_conf)->fastcgi_ss, res->ai_addr, res->ai_addrlen);
+
+	freeaddrinfo(res);
+
+	return (0);
+}
Index: usr.sbin/httpd/proc.c
@@ -401,7 +401,7 @@
 			free(cause);
 		} else
 			log_warnx("lost child: pid %u", pid);
-	} while (pid != -1 || (pid == -1 && errno == EINTR));
+	} while (pid != -1 || errno == EINTR);
 }
 
 void
Index: usr.sbin/httpd/server.c
@@ -119,13 +119,6 @@
 	}
 
 	/* Open listening socket in the privileged process */
-	if ((srv->srv_conf.flags & SRVFLAG_TLS) && srv->srv_conf.tls_cert ==
-	    NULL) {
-		/* soft fail if cert is not there yet */
-		srv->srv_s = -1;
-		return (0);
-	}
-
 	if ((srv->srv_s = server_socket_listen(&srv->srv_conf.ss,
 	    srv->srv_conf.port, &srv->srv_conf)) == -1)
 		return (-1);
@@ -257,10 +250,6 @@
 	if ((srv->srv_conf.flags & SRVFLAG_TLS) == 0)
 		return (0);
 
-	if (srv->srv_conf.tls_cert == NULL)
-		/* soft fail if cert is not there yet */
-		return (0);
-
 	log_debug("%s: setting up tls for %s", __func__, srv->srv_conf.name);
 
 	if (tls_init() != 0) {
@@ -1160,7 +1149,7 @@
 	if (srv->srv_conf.flags & SRVFLAG_TLS) {
 		if (tls_accept_socket(srv->srv_tls_ctx, &clt->clt_tls_ctx,
 		    clt->clt_s) != 0) {
-			server_close(clt, "failed to setup tls context");
+			server_close(clt, "failed to accept tls socket");
 			return;
 		}
 		event_again(&clt->clt_ev, clt->clt_s, EV_TIMEOUT|EV_READ,
Index: usr.sbin/httpd/server_fcgi.c
@@ -97,44 +97,15 @@
 	size_t				 scriptlen;
 	int				 pathlen;
 	int				 fd = -1, ret;
-	const char			*stripped, *p, *alias, *errstr = NULL;
+	const char			*stripped, *alias, *errstr = NULL;
 	char				*query_alias, *str, *script = NULL;
 
-	if (srv_conf->socket[0] == ':') {
-		struct sockaddr_storage	 ss;
-		in_port_t		 port;
-
-		p = srv_conf->socket + 1;
-
-		port = strtonum(p, 0, 0xffff, &errstr);
-		if (errstr != NULL) {
-			log_warn("%s: strtonum %s, %s", __func__, p, errstr);
-			goto fail;
-		}
-		memset(&ss, 0, sizeof(ss));
-		ss.ss_family = AF_INET;
-		((struct sockaddr_in *)
-		    &ss)->sin_addr.s_addr = htonl(INADDR_LOOPBACK);
-		port = htons(port);
-
-		if ((fd = server_socket_connect(&ss, port, srv_conf)) == -1)
-			goto fail;
-	} else {
-		struct sockaddr_un	 sun;
-
-		if ((fd = socket(AF_UNIX,
-		    SOCK_STREAM | SOCK_NONBLOCK, 0)) == -1)
-			goto fail;
-
-		memset(&sun, 0, sizeof(sun));
-		sun.sun_family = AF_UNIX;
-		if (strlcpy(sun.sun_path, srv_conf->socket,
-		    sizeof(sun.sun_path)) >= sizeof(sun.sun_path)) {
-			errstr = "socket path to long";
-			goto fail;
-		}
-
-		if (connect(fd, (struct sockaddr *)&sun, sizeof(sun)) == -1)
+	if ((fd = socket(srv_conf->fastcgi_ss.ss_family,
+	    SOCK_STREAM | SOCK_NONBLOCK, 0)) == -1)
+		goto fail;
+	if ((connect(fd, (struct sockaddr *) &srv_conf->fastcgi_ss,
+	    srv_conf->fastcgi_ss.ss_len)) == -1) {
+		if (errno != EINPROGRESS)
 			goto fail;
 	}
 
@@ -328,13 +299,13 @@
 	}
 
 	if (!desc->http_query) {
-		if (fcgi_add_param(&param, "REQUEST_URI", desc->http_path,
+		if (fcgi_add_param(&param, "REQUEST_URI", desc->http_path_orig,
 		    clt) == -1) {
 			errstr = "failed to encode param";
 			goto fail;
 		}
 	} else {
-		if (asprintf(&str, "%s?%s", desc->http_path,
+		if (asprintf(&str, "%s?%s", desc->http_path_orig,
 		    desc->http_query) == -1) {
 			errstr = "failed to encode param";
 			goto fail;
@@ -684,7 +655,7 @@
 
 	/* Date header is mandatory and should be added as late as possible */
 	key.kv_key = "Date";
-	if ((kv = kv_find(&resp->http_headers, &key)) == NULL &&
+	if (kv_find(&resp->http_headers, &key) == NULL &&
 	    (server_http_time(time(NULL), tmbuf, sizeof(tmbuf)) <= 0 ||
 	    kv_add(&resp->http_headers, "Date", tmbuf) == NULL))
 		return (-1);
Index: usr.sbin/httpd/server_file.c
@@ -477,14 +477,17 @@
 
 	/* A CSS stylesheet allows minimal customization by the user */
 	style = "body { background-color: white; color: black; font-family: "
-	    "sans-serif; }\nhr { border: 0; border-bottom: 1px dashed; }\n";
+	    "sans-serif; }\nhr { border: 0; border-bottom: 1px dashed; }\n"
+	    "@media (prefers-color-scheme: dark) {\n"
+	    "body { background-color: #1E1F21; color: #EEEFF1; }\n"
+	    "a { color: #BAD7FF; }\n}";
+
 	/* Generate simple HTML index document */
 	if (evbuffer_add_printf(evb,
 	    "<!DOCTYPE html>\n"
 	    "<html>\n"
 	    "<head>\n"
-	    "<meta http-equiv=\"Content-Type\" content=\"text/html; "
-	    "charset=utf-8\"/>\n"
+	    "<meta charset=\"utf-8\">\n"
 	    "<title>Index of %s</title>\n"
 	    "<style type=\"text/css\"><!--\n%s\n--></style>\n"
 	    "</head>\n"
Index: usr.sbin/httpd/server_http.c
@@ -100,6 +100,8 @@
 
 	free(desc->http_path);
 	desc->http_path = NULL;
+	free(desc->http_path_orig);
+	desc->http_path_orig = NULL;
 	free(desc->http_path_alias);
 	desc->http_path_alias = NULL;
 	free(desc->http_query);
@@ -921,15 +923,17 @@
 	/* A CSS stylesheet allows minimal customization by the user */
 	style = "body { background-color: white; color: black; font-family: "
 	    "'Comic Sans MS', 'Chalkboard SE', 'Comic Neue', sans-serif; }\n"
-	    "hr { border: 0; border-bottom: 1px dashed; }\n";
+	    "hr { border: 0; border-bottom: 1px dashed; }\n"
+	    "@media (prefers-color-scheme: dark) {\n"
+	    "body { background-color: #1E1F21; color: #EEEFF1; }\n"
+	    "a { color: #BAD7FF; }\n}";
 
 	/* Generate simple HTML error document */
 	if ((bodylen = asprintf(&body,
 	    "<!DOCTYPE html>\n"
 	    "<html>\n"
 	    "<head>\n"
-	    "<meta http-equiv=\"Content-Type\" content=\"text/html; "
-	    "charset=utf-8\"/>\n"
+	    "<meta charset=\"utf-8\">\n"
 	    "<title>%03d %s</title>\n"
 	    "<style type=\"text/css\"><!--\n%s\n--></style>\n"
 	    "</head>\n"
@@ -1202,9 +1206,13 @@
 	char			*hostval, *query;
 	const char		*errstr = NULL;
 
-	/* Decode the URL */
+	/* Preserve original path */
 	if (desc->http_path == NULL ||
-	    url_decode(desc->http_path) == NULL)
+	    (desc->http_path_orig = strdup(desc->http_path)) == NULL)
+		goto fail;
+
+	/* Decode the URL */
+	if (url_decode(desc->http_path) == NULL)
 		goto fail;
 
 	/* Canonicalize the request path */
@@ -1271,8 +1279,7 @@
 				    hostname, FNM_CASEFOLD);
 			}
 			if (ret == 0 &&
-			    (portval == -1 ||
-			    (portval != -1 && portval == srv_conf->port))) {
+			    (portval == -1 || portval == srv_conf->port)) {
 				/* Replace host configuration */
 				clt->clt_srv_conf = srv_conf;
 				srv_conf = NULL;
