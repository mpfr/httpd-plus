
Copyright (c) 2020, 2021 Matthias Pressfreund

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Index: usr.sbin/httpd/config.c
@@ -489,7 +489,12 @@
 		/* Inherit configuration from the parent */
 		f = SRVFLAG_INDEX|SRVFLAG_NO_INDEX;
 		if ((srv_conf->flags & f) == 0) {
-			srv_conf->flags |= parent->flags & f;
+			/*
+			 * Inherit index flags from parent server only if
+			 * auto-index flag of location is not set
+			 */
+			if ((srv_conf->flags & SRVFLAG_AUTO_INDEX) == 0)
+				srv_conf->flags |= parent->flags & f;
 			(void)strlcpy(srv_conf->index, parent->index,
 			    sizeof(srv_conf->index));
 		}
Index: usr.sbin/httpd/httpd.8
@@ -1,5 +1,6 @@
 .\"	$OpenBSD: httpd.8,v 1.53 2016/09/15 20:57:07 jmc Exp $
 .\"
+.\" Copyright (c) 2021 Matthias Pressfreund
 .\" Copyright (c) 2014 Reyk Floeter <reyk@openbsd.org>
 .\"
 .\" Permission to use, copy, modify, and distribute this software for any
@@ -41,6 +42,10 @@
 .Dv SIGHUP
 and reopens log files when it receives
 .Dv SIGUSR1 .
+.Pp
+It is furthermore equipped with the additional functionality provided by the
+.Lk https://github.com/mpfr/httpd-plus httpd-plus
+add-on package.
 .Pp
 The options are as follows:
 .Bl -tag -width Dssmacro=value
Index: usr.sbin/httpd/httpd.conf.5
@@ -1,5 +1,6 @@
 .\"	$OpenBSD: httpd.conf.5,v 1.118 2021/06/07 10:53:59 tb Exp $
 .\"
+.\" Copyright (c) 2020, 2021 Matthias Pressfreund
 .\" Copyright (c) 2014, 2015 Reyk Floeter <reyk@openbsd.org>
 .\"
 .\" Permission to use, copy, modify, and distribute this software for any
@@ -23,7 +24,10 @@
 .Sh DESCRIPTION
 .Nm
 is the configuration file for the HTTP daemon,
-.Xr httpd 8 .
+.Xr httpd 8 ,
+which is equipped with the additional functionality provided by the
+.Lk https://github.com/mpfr/httpd-plus httpd-plus
+add-on package.
 .Pp
 .Nm
 is divided into the following main sections:
@@ -808,6 +812,41 @@
 		request rewrite "/new/%1"
 	}
 }
+.Ed
+The
+.Ic location not found
+option may be used to enable
+.Lk https://wordpress.org/support/article/using-permalinks/ WordPress Pretty Permalinks
+just like on an Apache web server with
+.Pa mod_rewrite
+installed.
+.Bd -literal -offset indent
+server "www.example.com" {
+	listen on * port www
+	directory index "index.php"
+
+	location not found "/*" {
+		request rewrite "/index.php"
+	}
+	location "/*.php" {
+		fastcgi socket "/run/php-fpm.sock"
+	}
+}
+.Ed
+WordPress, however, is unable to discover that
+.Xr httpd 8
+is now capable to perform required URL rewrites.
+This will make the
+.Lk https://wordpress.org/support/article/settings-permalinks-screen/ Permalink Settings Screen
+not behave as expected.
+Luckily, and for this case exactly, the
+.Lk https://developer.wordpress.org/reference/hooks/got_url_rewrite/ got_url_rewrite hook
+exists.
+Adding the following line of code into the current theme's
+.Pa functions.php
+file will straighten things out.
+.Bd -literal -offset indent
+add_filter('got_url_rewrite', '__return_true');
 .Ed
 .Sh SEE ALSO
 .Xr htpasswd 1 ,
Index: usr.sbin/httpd/httpd.h
@@ -665,6 +665,9 @@
 
 SPLAY_PROTOTYPE(client_tree, client, clt_nodes, server_client_cmp);
 
+#define open_server_root(srv_conf, mode)				\
+	open(*(srv_conf)->root != '\0' ? (srv_conf)->root : "/", mode)
+
 /* server_http.c */
 void	 server_http_init(struct server *);
 void	 server_http(void);
@@ -693,7 +696,6 @@
 	 server_root_strip(const char *, int);
 struct server_config *
 	 server_getlocation(struct client *, const char *);
-int	 server_locationaccesstest(struct server_config *, const char *);
 const char *
 	 server_http_host(struct sockaddr_storage *, char *, size_t);
 char	*server_http_parsehost(char *, char *, size_t, int *);
Index: usr.sbin/httpd/parse.y
@@ -1564,10 +1564,10 @@
 int
 yylex(void)
 {
-	unsigned char	 buf[8096];
-	unsigned char	*p, *val;
-	int		 quotec, next, c;
-	int		 token;
+	char	 buf[8096];
+	char	*p, *val;
+	int	 quotec, next, c;
+	int	 token;
 
 top:
 	p = buf;
@@ -1603,7 +1603,7 @@
 		p = val + strlen(val) - 1;
 		lungetc(DONE_EXPAND);
 		while (p >= val) {
-			lungetc(*p);
+			lungetc((unsigned char)*p);
 			p--;
 		}
 		lungetc(START_EXPAND);
@@ -1679,8 +1679,8 @@
 		} else {
 nodigits:
 			while (p > buf + 1)
-				lungetc(*--p);
-			c = *--p;
+				lungetc((unsigned char)*--p);
+			c = (unsigned char)*--p;
 			if (c == '-')
 				return (c);
 		}
Index: usr.sbin/httpd/server_file.c
@@ -165,10 +165,17 @@
 	struct server_config	*srv_conf = clt->clt_srv_conf;
 	char			 path[PATH_MAX];
 	const char		*stripped, *errstr = NULL;
-	int			 ret = 500;
+	int			 ret = 500, rootfd;
 
 	if (srv_conf->flags & SRVFLAG_FCGI)
 		return (server_fcgi(env, clt));
+
+	/* If the server root is not accessible, we have a problem */
+	if ((rootfd = open_server_root(srv_conf, O_RDONLY)) == -1) {
+		errstr = srv_conf->root;
+		goto abort;
+	}
+	close(rootfd);
 
 	/* Request path is already canonicalized */
 	stripped = server_root_strip(
Index: usr.sbin/httpd/server_http.c
@@ -51,6 +51,9 @@
 		    struct client *);
 char		*server_expand_http(struct client *, const char *,
 		    char *, size_t);
+int		 http_version_num(char *);
+int		 server_locationaccesstest(struct server_config *,
+		    const char *);
 
 static struct http_method	 http_methods[] = HTTP_METHODS;
 static struct http_error	 http_errors[] = HTTP_ERRORS;
@@ -198,6 +201,20 @@
 	return (ret);
 }
 
+int
+http_version_num(char *version)
+{
+	if (strcmp(version, "HTTP/0.9") == 0)
+		return (9);
+	if (strcmp(version, "HTTP/1.0") == 0)
+		return (10);
+	/* any other version 1.x gets downgraded to 1.1 */
+	if (strncmp(version, "HTTP/1", 6) == 0)
+		return (11);
+
+	return (0);
+}
+
 void
 server_read_http(struct bufferevent *bev, void *arg)
 {
@@ -206,7 +223,9 @@
 	struct evbuffer		*src = EVBUFFER_INPUT(bev);
 	char			*line = NULL, *key, *value;
 	const char		*errstr;
+	char			*http_version;
 	size_t			 size, linelen;
+	int			 version;
 	struct kv		*hdr = NULL;
 
 	getmonotime(&clt->clt_tv_last);
@@ -268,8 +287,14 @@
 		else if (*key == ' ' || *key == '\t')
 			/* Multiline headers wrap with a space or tab */
 			value = NULL;
-		else
+		else {
+			/* Not a multiline header, should have a : */
 			value = strchr(key, ':');
+			if (value == NULL) {
+				server_abort_http(clt, 400, "malformed");
+				goto abort;
+			}
+		}
 		if (value == NULL) {
 			if (clt->clt_line == 1) {
 				server_abort_http(clt, 400, "malformed");
@@ -311,25 +336,40 @@
 			if (desc->http_path == NULL)
 				goto fail;
 
-			desc->http_version = strchr(desc->http_path, ' ');
-			if (desc->http_version == NULL) {
+			http_version = strchr(desc->http_path, ' ');
+			if (http_version == NULL) {
 				server_abort_http(clt, 400, "malformed");
 				goto abort;
 			}
 
-			*desc->http_version++ = '\0';
+			*http_version++ = '\0';
 			desc->http_query = strchr(desc->http_path, '?');
 			if (desc->http_query != NULL)
 				*desc->http_query++ = '\0';
 
 			/*
-			 * Have to allocate the strings because they could
+			 * We have to allocate the strings because they could
 			 * be changed independently by the filters later.
+			 * Allow HTTP version 0.9 to 1.1.
+			 * Downgrade http version > 1.1 <= 1.9 to version 1.1.
+			 * Return HTTP Version Not Supported for anything else.
 			 */
-			if ((desc->http_version =
-			    strdup(desc->http_version)) == NULL)
-				goto fail;
 
+			version = http_version_num(http_version);
+
+			if (version == 0) {
+				server_abort_http(clt, 505, "bad http version");
+				goto abort;
+			} else if (version == 11) {
+				if ((desc->http_version =
+				    strdup("HTTP/1.1")) == NULL)
+					goto fail;
+			} else {
+				if ((desc->http_version =
+				    strdup(http_version)) == NULL)
+					goto fail;
+			}
+
 			if (desc->http_query != NULL &&
 			    (desc->http_query =
 			    strdup(desc->http_query)) == NULL)
@@ -1320,10 +1360,8 @@
 		goto fail;
 
 	/* Now search for the location */
-	if ((srv_conf = server_getlocation(clt, desc->http_path)) == NULL) {
-		server_abort_http(clt, 500, desc->http_path);
-		return (-1);
-	}
+	if ((srv_conf = server_getlocation(clt, desc->http_path)) == NULL)
+		goto rooterr;
 
 	/* Optional rewrite */
 	if (srv_conf->flags & SRVFLAG_PATH_REWRITE) {
@@ -1360,10 +1398,8 @@
 
 		/* Now search for the updated location */
 		if ((srv_conf = server_getlocation(clt,
-		    desc->http_path_alias)) == NULL) {
-			server_abort_http(clt, 500, desc->http_path_alias);
-			return (-1);
-		}
+		    desc->http_path_alias)) == NULL)
+			goto rooterr;
 	}
 
 	if (clt->clt_toread > 0 && (size_t)clt->clt_toread >
@@ -1385,6 +1421,11 @@
  fail:
 	server_abort_http(clt, 400, "bad request");
 	return (-1);
+
+ rooterr: /* server root inaccessible */
+	srv_conf = clt->clt_srv_conf;
+	server_abort_http(clt, 500, srv_conf->root);
+	return (-1);
 }
 
 const char *
@@ -1455,7 +1496,8 @@
 	    srv_conf->flags) == 0)
 		return (0);
 
-	if ((rootfd = open(srv_conf->root, O_RDONLY)) == -1)
+	/* If the server root is not accessible, we have a problem */
+	if ((rootfd = open_server_root(srv_conf, O_RDONLY)) == -1)
 		return (-1);
 
 	path = server_root_strip(path, srv_conf->strip) + 1;
