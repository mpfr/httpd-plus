
Copyright (c) 2021 Matthias Pressfreund

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Index: usr.sbin/httpd/config.c
@@ -52,6 +52,9 @@
 	    CONFIG_SERVERS|CONFIG_MEDIA|CONFIG_AUTH;
 	ps->ps_what[PROC_LOGGER] = CONFIG_SERVERS;
 
+	(void)strlcpy(env->sc_errdocroot, HTTPD_ERRDOCROOT,
+	    sizeof(env->sc_errdocroot));
+
 	/* Other configuration */
 	what = ps->ps_what[privsep_process];
 
@@ -601,6 +604,10 @@
 		tv = &srv_conf->notifier.timeout;
 		if (!timeval_isset(tv))
 			*tv = parent->notifier.timeout;
+
+		srv_conf->flags |= parent->flags & SRVFLAG_ERRDOCS;
+		(void)strlcpy(srv_conf->errdocroot, parent->errdocroot,
+		    sizeof(srv_conf->errdocroot));
 
 		DPRINTF("%s: %s %d location \"%s\", "
 		    "parent \"%s[%u]\", flags: %s",
Index: usr.sbin/httpd/httpd.conf.5
@@ -125,6 +125,44 @@
 section below.
 If not specified, the default type is set to
 .Ar application/octet-stream .
+.It Ic errdocs Oo Ic from Ar directory Oc
+Let
+.Xr httpd 8
+return custom error documents instead of the built-in ones.
+The default location for these documents is
+.Pa /errdocs Pq below Ic chroot
+unless specified otherwise by the
+.Ic from
+option.
+.Pp
+In general, custom error documents are standalone
+.Sq Dv .html
+files provided in one of the following ways:
+.Bl -bullet -offset indent -compact
+.It
+As dedicated files named after the 3-digit HTTP response code they are used for
+.Pq e.g. Sq Dv 404.html .
+.It
+As a generic template file named
+.Sq Dv err.html
+which is used for response codes no dedicated file is provided for.
+.El
+.Pp
+In case the latter does not exist and there is no dedicated file available for
+a certain response code, the built-in error document will be used as fallback.
+.Pp
+A custom error document may contain the following macros that will be expanded
+at runtime:
+.Pp
+.Bl -tag -width $RESPONSE_CODE -offset indent -compact
+.It Ic $HTTP_ERROR
+The error message text.
+.It Ic $RESPONSE_CODE
+The 3-digit HTTP response code sent to the client.
+.It Ic $SERVER_SOFTWARE
+The server software name of
+.Xr httpd 8 .
+.El
 .It Ic logdir Ar directory
 Specifies the full path of the directory in which log files will be written.
 If not specified, it defaults to
@@ -284,6 +322,12 @@
 .Xr httpd 8
 will neither display nor generate a directory index.
 .El
+.It Oo Ic no Oc Ic errdocs Oo Ic from Ar directory Oc
+Overrides or, if the
+.Ic no
+keyword is given, disables globally defined custom error documents for the
+current
+.Ic server .
 .It Oo Ic no Oc Ic fastcgi Oo Ar option Oc
 Enable FastCGI instead of serving files.
 Valid options are:
@@ -448,6 +492,7 @@
 except
 .Ic alias ,
 .Ic connection ,
+.Ic errdocs ,
 .Ic hsts ,
 .Ic listen on ,
 .Ic location ,
Index: usr.sbin/httpd/httpd.h
@@ -50,6 +50,9 @@
 #define HTTPD_USER		"www"
 #define HTTPD_SERVERNAME	"OpenBSD httpd"
 #define HTTPD_DOCROOT		"/htdocs"
+#define HTTPD_ERRDOCROOT	"/errdocs"
+#define HTTPD_ERRDOCTEMPLATE	"err.html" /* 3-char name */
+#define HTTPD_ERRDOCROOT_MAX	(PATH_MAX - sizeof(HTTPD_ERRDOCTEMPLATE))
 #define HTTPD_INDEX		"index.html"
 #define HTTPD_FCGI_SOCKET	"/run/slowcgi.sock"
 #define HTTPD_LOGROOT		"/logs"
@@ -384,6 +387,7 @@
 #define SRVFLAG_NO_FCGI		0x00000080
 #define SRVFLAG_LOG		0x00000100
 #define SRVFLAG_NO_LOG		0x00000200
+#define SRVFLAG_ERRDOCS		0x00000400
 #define SRVFLAG_SYSLOG		0x00000800
 #define SRVFLAG_NO_SYSLOG	0x00001000
 #define SRVFLAG_TLS		0x00002000
@@ -406,7 +410,7 @@
 
 #define SRVFLAG_BITS							\
 	"\10\01INDEX\02NO_INDEX\03AUTO_INDEX\04NO_AUTO_INDEX"		\
-	"\05ROOT\06LOCATION\07FCGI\10NO_FCGI\11LOG\12NO_LOG"		\
+	"\05ROOT\06LOCATION\07FCGI\10NO_FCGI\11LOG\12NO_LOG\13ERRDOCS"	\
 	"\14SYSLOG\15NO_SYSLOG\16TLS\17ACCESS_LOG\20ERROR_LOG"		\
 	"\21AUTH\22NO_AUTH\23BLOCK\24NO_BLOCK\25LOCATION_MATCH"		\
 	"\26SERVER_MATCH\27SERVER_HSTS\30DEFAULT_TYPE\31PATH\32NO_PATH" \
@@ -599,6 +603,7 @@
 
 	struct addr_filter	 clientfilter[HTTPD_CLIENT_FILTER_MAX];
 	struct socket_notifier	 notifier;
+	char			 errdocroot[HTTPD_ERRDOCROOT_MAX];
 
 	TAILQ_ENTRY(server_config) entry;
 };
@@ -657,6 +662,9 @@
 
 	struct privsep		*sc_ps;
 	int			 sc_reload;
+
+	int			 sc_custom_errdocs;
+	char			 sc_errdocroot[HTTPD_ERRDOCROOT_MAX];
 };
 
 #define HTTPD_OPT_VERBOSE		0x01
Index: usr.sbin/httpd/parse.y
@@ -158,14 +158,14 @@
 %token	TIMEOUT TLS TYPE TYPES HSTS MAXAGE SUBDOMAINS DEFAULT PRELOAD REQUEST
 %token	ERROR INCLUDE AUTHENTICATE WITH BLOCK DROP RETURN PASS REWRITE
 %token	CA CLIENT CRL OPTIONAL PARAM FORWARDED FOUND NOT CACHE SCRIPT FROM
-%token	NOTIFY MESSAGE CR LF
+%token	NOTIFY MESSAGE CR LF ERRDOCS
 %token	<v.string>	STRING
 %token  <v.number>	NUMBER
 %type	<v.port>	port
 %type	<v.string>	fcgiport
 %type	<v.number>	opttls optmatch optfound
 %type	<v.tv>		timeout
-%type	<v.string>	numberstring optstring stringornl
+%type	<v.string>	numberstring optstring stringornl optfrom
 %type	<v.string>	optclientfilter clientfilters_l msgopts_l
 %type	<v.auth>	authopts
 
@@ -245,6 +245,17 @@
 		| CHROOT STRING		{
 			conf->sc_chroot = $2;
 		}
+		| ERRDOCS optfrom	{
+			if ($2 != NULL && strlcpy(conf->sc_errdocroot, $2,
+			    sizeof(conf->sc_errdocroot)) >=
+			    sizeof(conf->sc_errdocroot)) {
+				yyerror("errdoc root path too long");
+				free($2);
+				YYERROR;
+			}
+			free($2);
+			conf->sc_custom_errdocs = 1;
+		}
 		| LOGDIR STRING		{
 			conf->sc_logdir = $2;
 		}
@@ -254,6 +265,10 @@
 		}
 		;
 
+optfrom		: /* empty */	{ $$ = NULL; }
+		| FROM STRING	{ $$ = $2; }
+		;
+
 server		: SERVER optmatch STRING	{
 			struct server		*s;
 			struct sockaddr_un	*sun;
@@ -321,6 +336,12 @@
 
 			s->srv_conf.hsts_max_age = SERVER_HSTS_DEFAULT_AGE;
 
+			(void)strlcpy(s->srv_conf.errdocroot,
+			    conf->sc_errdocroot,
+			    sizeof(s->srv_conf.errdocroot));
+			if (conf->sc_custom_errdocs)
+				s->srv_conf.flags |= SRVFLAG_ERRDOCS;
+
 			if (last_server_id == INT_MAX) {
 				yyerror("too many servers defined");
 				free(s);
@@ -525,6 +546,28 @@
 				    entry);
 			}
 		}
+		| ERRDOCS optfrom	{
+			if (parentsrv != NULL) {
+				yyerror("errdocs inside location");
+				YYERROR;
+			}
+			if ($2 != NULL && strlcpy(srv->srv_conf.errdocroot, $2,
+			    sizeof(srv->srv_conf.errdocroot)) >=
+			    sizeof(srv->srv_conf.errdocroot)) {
+				yyerror("errdoc root path too long");
+				free($2);
+				YYERROR;
+			}
+			free($2);
+			srv->srv_conf.flags |= SRVFLAG_ERRDOCS;
+		}
+		| NO ERRDOCS		{
+			if (parentsrv != NULL) {
+				yyerror("errdocs inside location");
+				YYERROR;
+			}
+			srv->srv_conf.flags &= ~SRVFLAG_ERRDOCS;
+		}
 		| tcpip			{
 			if (parentsrv != NULL) {
 				yyerror("tcp flags inside location");
@@ -2042,6 +2085,7 @@
 		{ "directory",		DIRECTORY },
 		{ "drop",		DROP },
 		{ "ecdhe",		ECDHE },
+		{ "errdocs",		ERRDOCS },
 		{ "error",		ERR },
 		{ "fastcgi",		FCGI },
 		{ "forwarded",		FORWARDED },
Index: usr.sbin/httpd/server_http.c
@@ -22,6 +22,7 @@
 #include <sys/socket.h>
 #include <sys/tree.h>
 #include <sys/stat.h>
+#include <sys/mman.h>
 
 #include <netinet/in.h>
 #include <arpa/inet.h>
@@ -858,6 +859,9 @@
 	char			 buf[IBUF_READ_SIZE];
 	char			*escapedmsg = NULL;
 	int			 bodylen;
+	char			*errpath, *errfile, *str;
+	struct stat		 errsb;
+	int			 errfd;
 
 	if (code == 0) {
 		server_close(clt, "dropped");
@@ -933,6 +937,67 @@
 
 	free(escapedmsg);
 
+	if ((srv_conf->flags & SRVFLAG_ERRDOCS) == 0)
+		goto builtin; /* errdocs not enabled */
+
+	if (asprintf(&errpath, "%s/%03d.html", srv_conf->errdocroot,
+	    code) == -1)
+		fatal("asprintf");
+	if (access(errpath, R_OK) == 0 && stat(errpath, &errsb) == 0 &&
+	    (errfd = open(errpath, O_RDONLY)) != -1) {
+		free(errpath);
+		goto custom; /* dedicated file found and opened */
+	}
+	free(errpath);
+
+	/* no dedicated file found */
+
+	if (asprintf(&errpath, "%s/%s", srv_conf->errdocroot,
+	    HTTPD_ERRDOCTEMPLATE) == -1)
+		fatal("asprintf");
+	if (access(errpath, R_OK) == 0 && stat(errpath, &errsb) == 0 &&
+	    (errfd = open(errpath, O_RDONLY)) != -1) {
+		free(errpath);
+		goto custom; /* template found and opened */
+	}
+	free(errpath);
+
+	goto builtin; /* no template found */
+
+ custom:
+	if ((errfile = mmap(NULL, errsb.st_size, PROT_READ, MAP_PRIVATE, errfd,
+	    0)) == MAP_FAILED) {
+		close(errfd);
+		goto builtin;
+	}
+	if ((body = strdup(errfile)) == NULL)
+		fatal("strdup");
+	if (munmap(errfile, errsb.st_size) == -1)
+		fatal("munmap");
+	close(errfd);
+	if (strstr(body, "$HTTP_ERROR") != NULL) {
+		errfile = replace_var(body, "$HTTP_ERROR", httperr);
+		free(body);
+		body = errfile;
+	}
+	if (strstr(body, "$RESPONSE_CODE") != NULL) {
+		if (asprintf(&str, "%03u", code) == -1)
+			fatal("asprintf");
+		errfile = replace_var(body, "$RESPONSE_CODE", str);
+		free(str);
+		free(body);
+		body = errfile;
+	}
+	if (strstr(body, "$SERVER_SOFTWARE") != NULL) {
+		errfile = replace_var(body, "$SERVER_SOFTWARE",
+		    HTTPD_SERVERNAME);
+		free(body);
+		body = errfile;
+	}
+	bodylen = strlen(body);
+	goto send;
+
+ builtin:
 	/* A CSS stylesheet allows minimal customization by the user */
 	style = "body { background-color: white; color: black; font-family: "
 	    "'Comic Sans MS', 'Chalkboard SE', 'Comic Neue', sans-serif; }\n"
@@ -960,6 +1025,7 @@
 		goto done;
 	}
 
+ send:
 	if (srv_conf->flags & SRVFLAG_SERVER_HSTS &&
 	    srv_conf->flags & SRVFLAG_TLS) {
 		if (asprintf(&hstsheader, "Strict-Transport-Security: "
