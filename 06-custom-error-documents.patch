
Copyright (c) 2021 Matthias Pressfreund

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Index: usr.sbin/httpd/config.c
@@ -52,6 +52,9 @@
 	    CONFIG_SERVERS|CONFIG_MEDIA|CONFIG_AUTH;
 	ps->ps_what[PROC_LOGGER] = CONFIG_SERVERS;
 
+	(void)strlcpy(env->sc_errdocs.from, HTTPD_ERRROOT,
+	    sizeof(env->sc_errdocs.from));
+
 	/* Other configuration */
 	what = ps->ps_what[privsep_process];
 
@@ -601,6 +604,10 @@
 		tv = &srv_conf->notifier.timeout;
 		if (!timeval_isset(tv))
 			*tv = parent->notifier.timeout;
+
+		f = SRVFLAG_ERRDOCS;
+		srv_conf->flags |= parent->flags & f;
+		srv_conf->errdocs = parent->errdocs;
 
 		DPRINTF("%s: %s %d location \"%s\", "
 		    "parent \"%s[%u]\", flags: %s",
Index: usr.sbin/httpd/httpd.conf.5
@@ -125,6 +125,63 @@
 section below.
 If not specified, the default type is set to
 .Ar application/octet-stream .
+.It Ic errdocs Oo Ar option | Bro ... Brc Oc
+Let
+.Xr httpd 8
+return custom error documents instead of the built-in ones.
+The following options may be specified one at a time or enclosed by curly
+braces:
+.Bl -tag -width Ds
+.It Ic from Ar directory
+Specifies the
+.Ar directory
+in which to search for custom error documents and, if found, to load them from.
+Defaults to
+.Pa /errdocs .
+.It Ic template Ar file
+Specifies a
+.Ar file
+inside the
+.Ic from Ar directory
+to be commonly used as a template for all error documents not provided
+otherwise.
+The
+.Sq Dv .html
+extension of the
+.Ar file
+may be omitted.
+.El
+.Pp
+In general, custom error documents should be provided as standalone
+.Sq Dv .html
+files in one of the following ways (sorted by priority):
+.Bl -enum -offset indent -compact
+.It
+As a dedicated file for a specific 3-digit HTTP response code after which it is
+also named
+.Pq e.g. Sq Dv 404.html .
+.It
+By means of a
+.Ic template Ar file
+specified as outlined above.
+.El
+.Pp
+In case the latter is not specified and there is no dedicated file available
+for a certain response code, the built-in error document will be used as
+fallback.
+.Pp
+A custom error document may contain the following macros that will be expanded
+at runtime:
+.Pp
+.Bl -tag -width $RESPONSE_CODE -offset indent -compact
+.It Ic $HTTP_ERROR
+The error message text.
+.It Ic $RESPONSE_CODE
+The 3-digit HTTP response code sent to the client.
+.It Ic $SERVER_SOFTWARE
+The server software name of
+.Xr httpd 8 .
+.El
 .It Ic logdir Ar directory
 Specifies the full path of the directory in which log files will be written.
 If not specified, it defaults to
@@ -284,6 +341,9 @@
 .Xr httpd 8
 will neither display nor generate a directory index.
 .El
+.It Ic errdocs Oo Ar option | Bro ... Brc Oc
+Overrides globally defined custom error documents for the current
+.Ic server .
 .It Oo Ic no Oc Ic fastcgi Oo Ar option Oc
 Enable FastCGI instead of serving files.
 Valid options are:
@@ -448,6 +508,7 @@
 except
 .Ic alias ,
 .Ic connection ,
+.Ic errdocs ,
 .Ic hsts ,
 .Ic listen on ,
 .Ic location ,
Index: usr.sbin/httpd/httpd.h
@@ -50,6 +50,7 @@
 #define HTTPD_USER		"www"
 #define HTTPD_SERVERNAME	"OpenBSD httpd"
 #define HTTPD_DOCROOT		"/htdocs"
+#define HTTPD_ERRROOT		"/errdocs"
 #define HTTPD_INDEX		"index.html"
 #define HTTPD_FCGI_SOCKET	"/run/slowcgi.sock"
 #define HTTPD_LOGROOT		"/logs"
@@ -384,6 +385,7 @@
 #define SRVFLAG_NO_FCGI		0x00000080
 #define SRVFLAG_LOG		0x00000100
 #define SRVFLAG_NO_LOG		0x00000200
+#define SRVFLAG_ERRDOCS		0x00000400
 #define SRVFLAG_SYSLOG		0x00000800
 #define SRVFLAG_NO_SYSLOG	0x00001000
 #define SRVFLAG_TLS		0x00002000
@@ -406,7 +408,7 @@
 
 #define SRVFLAG_BITS							\
 	"\10\01INDEX\02NO_INDEX\03AUTO_INDEX\04NO_AUTO_INDEX"		\
-	"\05ROOT\06LOCATION\07FCGI\10NO_FCGI\11LOG\12NO_LOG"		\
+	"\05ROOT\06LOCATION\07FCGI\10NO_FCGI\11LOG\12NO_LOG\13ERRDOCS"	\
 	"\14SYSLOG\15NO_SYSLOG\16TLS\17ACCESS_LOG\20ERROR_LOG"		\
 	"\21AUTH\22NO_AUTH\23BLOCK\24NO_BLOCK\25LOCATION_MATCH"		\
 	"\26SERVER_MATCH\27SERVER_HSTS\30DEFAULT_TYPE\31PATH\32NO_PATH" \
@@ -525,6 +527,11 @@
 	struct event	*ev;
 };
 
+struct error_documents {
+	char	 from[PATH_MAX];
+	char	 tmpl[PATH_MAX];
+};
+
 struct server_config {
 	uint32_t		 id;
 	uint32_t		 parent_id;
@@ -599,6 +606,7 @@
 
 	struct addr_filter	 clientfilter[HTTPD_CLIENT_FILTER_MAX];
 	struct socket_notifier	 notifier;
+	struct error_documents	 errdocs;
 
 	TAILQ_ENTRY(server_config) entry;
 };
@@ -657,6 +665,9 @@
 
 	struct privsep		*sc_ps;
 	int			 sc_reload;
+
+	int			 sc_custom_errdocs;
+	struct error_documents	 sc_errdocs;
 };
 
 #define HTTPD_OPT_VERBOSE		0x01
Index: usr.sbin/httpd/parse.y
@@ -76,6 +76,7 @@
 struct addr_filter
 		*build_clientfilter(struct server_config *, char *);
 int		 clientfilter_cmp(struct addr_filter *, struct addr_filter *);
+int		 process_errdocs(struct error_documents *);
 int		 yyerror(const char *, ...)
     __attribute__((__format__ (printf, 1, 2)))
     __attribute__((__nonnull__ (1)));
@@ -121,6 +122,7 @@
 static struct server_config *srv_conf = NULL;
 struct serverlist	 servers;
 struct media_type	 media;
+struct error_documents	*errdocs;
 
 struct address	*host_v4(const char *);
 struct address	*host_v6(const char *);
@@ -158,7 +160,7 @@
 %token	TIMEOUT TLS TYPE TYPES HSTS MAXAGE SUBDOMAINS DEFAULT PRELOAD REQUEST
 %token	ERROR INCLUDE AUTHENTICATE WITH BLOCK DROP RETURN PASS REWRITE
 %token	CA CLIENT CRL OPTIONAL PARAM FORWARDED FOUND NOT CACHE SCRIPT FROM
-%token	NOTIFY MESSAGE CR LF
+%token	NOTIFY MESSAGE CR LF ERRDOCS TEMPLATE
 %token	<v.string>	STRING
 %token  <v.number>	NUMBER
 %type	<v.port>	port
@@ -245,6 +247,13 @@
 		| CHROOT STRING		{
 			conf->sc_chroot = $2;
 		}
+		| ERRDOCS		{
+			errdocs = &conf->sc_errdocs;
+		} errdocsopts 		{
+			if (process_errdocs(errdocs) == -1)
+				YYERROR;
+			conf->sc_custom_errdocs = 1;
+		}
 		| LOGDIR STRING		{
 			conf->sc_logdir = $2;
 		}
@@ -254,6 +263,35 @@
 		}
 		;
 
+errdocsopts	: '{' optnl errdocsopt_l '}'
+		| errdocsopt
+		| /* empty */
+		;
+
+errdocsopt_l	: errdocsopt optcommanl errdocsopt_l
+		| errdocsopt optnl
+		;
+
+errdocsopt	: FROM STRING		{
+			if (strlcpy(errdocs->from, $2,
+			    sizeof(errdocs->from)) >= sizeof(errdocs->from)) {
+				yyerror("errdocs root path truncated");
+				free($2);
+				YYERROR;
+			}
+			free($2);
+		}
+		| TEMPLATE STRING	{
+			if (strlcpy(errdocs->tmpl, $2,
+			    sizeof(errdocs->tmpl)) >= sizeof(errdocs->tmpl)) {
+				yyerror("errdocs template truncated");
+				free($2);
+				YYERROR;
+			}
+			free($2);
+		}
+		;
+
 server		: SERVER optmatch STRING	{
 			struct server		*s;
 			struct sockaddr_un	*sun;
@@ -321,6 +359,11 @@
 
 			s->srv_conf.hsts_max_age = SERVER_HSTS_DEFAULT_AGE;
 
+			if (conf->sc_custom_errdocs) {
+				s->srv_conf.errdocs = conf->sc_errdocs;
+				s->srv_conf.flags |= SRVFLAG_ERRDOCS;
+			}
+
 			if (last_server_id == INT_MAX) {
 				yyerror("too many servers defined");
 				free(s);
@@ -525,6 +568,17 @@
 				    entry);
 			}
 		}
+		| ERRDOCS		{
+			if (parentsrv != NULL) {
+				yyerror("errdocs inside location");
+				YYERROR;
+			}
+			errdocs = &srv->srv_conf.errdocs;
+		} errdocsopts		{
+			if (process_errdocs(errdocs) == -1)
+				YYERROR;
+			srv->srv_conf.flags |= SRVFLAG_ERRDOCS;
+		}
 		| tcpip			{
 			if (parentsrv != NULL) {
 				yyerror("tcp flags inside location");
@@ -1705,6 +1759,29 @@
 }
 
 int
+process_errdocs(struct error_documents *edocs)
+{
+	char	*c, *p;
+
+	if (*edocs->tmpl == '\0')
+		return (0);
+
+	if ((c = strrchr(edocs->tmpl, '.')) != NULL && strcmp(c, ".html"))
+		c = NULL;
+	if (asprintf(&p, "%s/%s%s", edocs->from, edocs->tmpl,
+	    c == NULL ? ".html" : "") == -1)
+		fatal("asprintf");
+	if (strlcpy(edocs->tmpl, p,
+	    sizeof(edocs->tmpl)) >= sizeof(edocs->tmpl)) {
+		yyerror("final errdocs template path too long: '%s'", p);
+		free(p);
+		return (-1);
+	}
+	free(p);
+	return (0);
+}
+
+int
 expand_braces(struct bstrq *resq, const char *cstr)
 {
 	struct bstrq	 bsq, trq;
@@ -2042,6 +2119,7 @@
 		{ "directory",		DIRECTORY },
 		{ "drop",		DROP },
 		{ "ecdhe",		ECDHE },
+		{ "errdocs",		ERRDOCS },
 		{ "error",		ERR },
 		{ "fastcgi",		FCGI },
 		{ "forwarded",		FORWARDED },
@@ -2089,6 +2167,7 @@
 		{ "subdomains",		SUBDOMAINS },
 		{ "syslog",		SYSLOG },
 		{ "tcp",		TCP },
+		{ "template",		TEMPLATE },
 		{ "ticket",		TICKET },
 		{ "timeout",		TIMEOUT },
 		{ "tls",		TLS },
Index: usr.sbin/httpd/server_http.c
@@ -22,6 +22,7 @@
 #include <sys/socket.h>
 #include <sys/tree.h>
 #include <sys/stat.h>
+#include <sys/mman.h>
 
 #include <netinet/in.h>
 #include <arpa/inet.h>
@@ -857,7 +858,10 @@
 	char			*clenheader = NULL;
 	char			 buf[IBUF_READ_SIZE];
 	char			*escapedmsg = NULL;
-	int			 bodylen;
+	int			 bodylen, pathlen;
+	char			*errpath, *errfile, *str;
+	struct stat		 errsb;
+	int			 errfd;
 
 	if (code == 0) {
 		server_close(clt, "dropped");
@@ -933,6 +937,69 @@
 
 	free(escapedmsg);
 
+	if ((srv_conf->flags & SRVFLAG_ERRDOCS) == 0)
+		goto builtin; /* errdocs not enabled */
+
+	if ((pathlen = asprintf(&errpath, "%s/%03d.html",
+	    srv_conf->errdocs.from, code)) == -1)
+		fatal("asprintf");
+	if (pathlen >= PATH_MAX) {
+		log_warn("errdocs path too long: %s", errpath);
+		free(errpath);
+		goto builtin; /* final path too long */
+	}
+	if (access(errpath, R_OK) == 0 && stat(errpath, &errsb) == 0 &&
+	    (errfd = open(errpath, O_RDONLY)) != -1) {
+		free(errpath);
+		goto custom; /* dedicated file found and opened */
+	}
+	free(errpath);
+
+	/* no dedicated file found */
+
+	if (*(errpath = srv_conf->errdocs.tmpl) == '\0')
+		goto builtin; /* no template specified */
+
+	if (access(errpath, R_OK) == 0 && stat(errpath, &errsb) == 0 &&
+	    (errfd = open(errpath, O_RDONLY)) != -1)
+		goto custom; /* template found and opened */
+
+	goto builtin; /* no template found */
+
+ custom:
+	if ((errfile = mmap(NULL, errsb.st_size, PROT_READ, MAP_PRIVATE, errfd,
+	    0)) == MAP_FAILED) {
+		close(errfd);
+		goto builtin;
+	}
+	if ((body = strdup(errfile)) == NULL)
+		fatal("strdup");
+	if (munmap(errfile, errsb.st_size) == -1)
+		fatal("munmap");
+	close(errfd);
+	if (strstr(body, "$HTTP_ERROR") != NULL) {
+		errfile = replace_var(body, "$HTTP_ERROR", httperr);
+		free(body);
+		body = errfile;
+	}
+	if (strstr(body, "$RESPONSE_CODE") != NULL) {
+		if (asprintf(&str, "%03u", code) == -1)
+			fatal("asprintf");
+		errfile = replace_var(body, "$RESPONSE_CODE", str);
+		free(str);
+		free(body);
+		body = errfile;
+	}
+	if (strstr(body, "$SERVER_SOFTWARE") != NULL) {
+		errfile = replace_var(body, "$SERVER_SOFTWARE",
+		    HTTPD_SERVERNAME);
+		free(body);
+		body = errfile;
+	}
+	bodylen = strlen(body);
+	goto send;
+
+ builtin:
 	/* A CSS stylesheet allows minimal customization by the user */
 	style = "body { background-color: white; color: black; font-family: "
 	    "'Comic Sans MS', 'Chalkboard SE', 'Comic Neue', sans-serif; }\n"
@@ -960,6 +1027,7 @@
 		goto done;
 	}
 
+ send:
 	if (srv_conf->flags & SRVFLAG_SERVER_HSTS &&
 	    srv_conf->flags & SRVFLAG_TLS) {
 		if (asprintf(&hstsheader, "Strict-Transport-Security: "
